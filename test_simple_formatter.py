#!/usr/bin/env python3
"""
Test script for Simple Job Formatter
Demonstrates essential job fields only
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.simple_job_formatter import SimpleJobFormatter


def test_simple_formatter():
    """Test the SimpleJobFormatter with sample job data"""
    
    # Initialize formatter
    formatter = SimpleJobFormatter()
    
    # Sample job data based on the image
    sample_jobs = [
        {
            "title": "Software Engineer",
            "job_type": "Full-time",
            "location": "Ho Chi Minh City, Vietnam",
            "company": "TechCorp",
            "description": "We are looking for a Software Engineer to join our growing team. You will develop and maintain web applications using modern technologies.",
            "salary": "$50,000 - $80,000 per year",
            "posted_date": "2 days ago",
            "job_link": "https://techcorp.com/jobs/software-engineer",
            "requirements": "3+ years experience with JavaScript, React, Node.js",
            "benefits": "Health insurance, remote work, flexible hours"
        },
        {
            "title": "Middle PHP Developer (Laravel)",
            "job_type": "Remote",
            "location": "Remote",
            "company": "StartupXYZ",
            "description": "Develop and optimize backend systems using PHP and Laravel framework. Work with a distributed team on exciting projects.",
            "salary": "40,000,000 - 60,000,000 VND per month",
            "posted_date": "1 week ago",
            "job_link": "https://startupxyz.com/careers/php-developer",
            "requirements": "2+ years PHP experience, Laravel framework knowledge",
            "benefits": "Competitive salary, learning opportunities, team events"
        },
        {
            "title": "Senior Frontend Developer",
            "job_type": "Full-time",
            "location": "Hanoi, Vietnam",
            "company": "DigitalAgency",
            "description": "Lead frontend development initiatives and mentor junior developers. Build scalable React applications.",
            "salary": "$70,000 - $100,000 annually",
            "posted_date": "3 days ago",
            "job_link": "https://digitalagency.com/jobs/frontend-developer",
            "requirements": "5+ years React experience, leadership skills",
            "benefits": "Stock options, health benefits, professional development"
        }
    ]
    
    print("üéØ Simple Job Formatter Demo")
    print("=" * 50)
    print("Ch·ªâ tr·∫£ v·ªÅ c√°c tr∆∞·ªùng c·∫ßn thi·∫øt cho ng∆∞·ªùi d√πng")
    print()
    
    # Test single job formatting
    print("üìã Single Job Format:")
    print("-" * 30)
    single_job = formatter.format_job(sample_jobs[0])
    for key, value in single_job.items():
        print(f"{key}: {value}")
    print()
    
    # Test multiple jobs formatting
    print("üìã Multiple Jobs Format:")
    print("-" * 30)
    formatted_jobs = formatter.format_jobs_list(sample_jobs)
    print(f"Total jobs: {formatted_jobs['total_count']}")
    print()
    
    for i, job in enumerate(formatted_jobs['jobs'], 1):
        print(f"Job #{i}:")
        print(f"  Title: {job['title']}")
        print(f"  Company: {job['company']}")
        print(f"  Location: {job['location']}")
        print(f"  Type: {job['type']}")
        print(f"  Salary: {job['salary']}")
        print(f"  Posted: {job['posted_date']}")
        print(f"  Link: {job['job_link']}")
        print()
    
    # Test job summary
    print("üìä Job Summary:")
    print("-" * 30)
    summary = formatter.get_job_summary(sample_jobs)
    print(f"Total jobs: {summary['total_jobs']}")
    print("Job types:")
    for job_type, count in summary['job_types'].items():
        print(f"  - {job_type}: {count}")
    print("Locations:")
    for location, count in summary['locations'].items():
        print(f"  - {location}: {count}")
    print()


def demonstrate_essential_fields():
    """Demonstrate what essential fields mean"""
    
    print("üéØ Essential Fields Only")
    print("=" * 50)
    print("Ng∆∞·ªùi d√πng ch·ªâ c·∫ßn:")
    print()
    print("‚úÖ C·∫ßn thi·∫øt:")
    print("  - title: T√™n c√¥ng vi·ªác")
    print("  - job_link: Link ƒë·ªÉ click v√†o xem chi ti·∫øt")
    print("  - company: T√™n c√¥ng ty")
    print("  - location: ƒê·ªãa ƒëi·ªÉm")
    print("  - type: Lo·∫°i c√¥ng vi·ªác (Full-time, Remote, etc.)")
    print("  - salary: L∆∞∆°ng (n·∫øu c√≥)")
    print("  - posted_date: Ng√†y ƒëƒÉng")
    print("  - description: M√¥ t·∫£ ng·∫Øn g·ªçn")
    print()
    print("‚ùå KH√îNG c·∫ßn:")
    print("  - Ph√¢n t√≠ch k·ªπ thu·∫≠t ph·ª©c t·∫°p")
    print("  - Quality scores")
    print("  - Technology extraction")
    print("  - Job level analysis")
    print("  - Recommendation engine")
    print("  - Star ratings")
    print("  - Match percentages")
    print()
    print("üéØ Nguy√™n t·∫Øc: ƒê∆°n gi·∫£n, r√µ r√†ng, d·ªÖ s·ª≠ d·ª•ng!")


def show_api_output_example():
    """Show example API output"""
    
    print("üöÄ API Output Example")
    print("=" * 50)
    
    example_output = {
        "success": True,
        "url": "https://example.com/careers",
        "formatted_jobs": {
            "jobs": [
                {
                    "title": "Software Engineer",
                    "company": "TechCorp",
                    "location": "Ho Chi Minh City, Vietnam",
                    "type": "Full-time",
                    "salary": "$50,000 - $80,000 per year",
                    "posted_date": "2 days ago",
                    "job_link": "https://techcorp.com/jobs/software-engineer",
                    "description": "We are looking for a Software Engineer..."
                }
            ],
            "total_count": 1
        },
        "job_summary": {
            "total_jobs": 1,
            "job_types": {"Full-time": 1},
            "locations": {"Ho Chi Minh City, Vietnam": 1}
        }
    }
    
    print("API Response Structure:")
    print("‚îú‚îÄ‚îÄ success: True/False")
    print("‚îú‚îÄ‚îÄ url: URL ƒë∆∞·ª£c crawl")
    print("‚îú‚îÄ‚îÄ formatted_jobs: Jobs ƒë√£ format")
    print("‚îÇ   ‚îú‚îÄ‚îÄ jobs: List c√°c job")
    print("‚îÇ   ‚îî‚îÄ‚îÄ total_count: T·ªïng s·ªë job")
    print("‚îî‚îÄ‚îÄ job_summary: T√≥m t·∫Øt")
    print("    ‚îú‚îÄ‚îÄ total_jobs: T·ªïng s·ªë")
    print("    ‚îú‚îÄ‚îÄ job_types: Ph√¢n lo·∫°i theo type")
    print("    ‚îî‚îÄ‚îÄ locations: Ph√¢n lo·∫°i theo location")
    print()
    print("üéØ Ng∆∞·ªùi d√πng ch·ªâ c·∫ßn:")
    print("1. L·∫•y danh s√°ch jobs t·ª´ formatted_jobs.jobs")
    print("2. Hi·ªÉn th·ªã title, company, location, type")
    print("3. T·∫°o link click v√†o job_link")
    print("4. Hi·ªÉn th·ªã summary t·ª´ job_summary")


def main():
    """Main function"""
    
    print("üéØ Simple Job Formatter - Essential Fields Only")
    print("=" * 60)
    print("Nguy√™n t·∫Øc: Ch·ªâ tr·∫£ v·ªÅ nh·ªØng g√¨ ng∆∞·ªùi d√πng th·ª±c s·ª± c·∫ßn!")
    print()
    
    # Run demonstrations
    test_simple_formatter()
    demonstrate_essential_fields()
    show_api_output_example()
    
    print("\n‚úÖ Demo completed!")
    print("\nüí° Key Benefits:")
    print("   - ƒê∆°n gi·∫£n, d·ªÖ hi·ªÉu")
    print("   - Ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c·∫ßn thi·∫øt")
    print("   - Ng∆∞·ªùi d√πng t·ª± click link ƒë·ªÉ xem chi ti·∫øt")
    print("   - Kh√¥ng c√≥ ph√¢n t√≠ch ph·ª©c t·∫°p")
    print("   - Performance t·ªët h∆°n")
    print("   - D·ªÖ maintain v√† debug")


if __name__ == "__main__":
    main() 