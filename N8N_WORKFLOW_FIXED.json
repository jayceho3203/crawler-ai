{
  "name": "My workflow 3 (Fixed & Optimized)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "441864de-e1c2-4b17-b37c-3a83cf2ef09d"
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [380, 1580],
      "id": "Webhook2",
      "name": "Webhook"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://crawler-ai.fly.dev/api/v1/crawl_and_extract_contact_info",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $json.body.url_career }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 1580],
      "id": "ScrapeCareerPage",
      "name": "Initial Career Crawl"
    },
    {
      "parameters": {
        "jsCode": "// Extract company_id from webhook and check initial result\nconst company_id = $('Webhook').item.json.body.company_id || 'default_company';\nconst career_page_url = $('Webhook').item.json.body.url_career;\nconst result = $input.first().json;\n\nif (result.success && result.total_jobs_found > 0) {\n  // Jobs found directly - process them\n  const jobs = result.jobs || [];\n  return jobs.map(job => ({\n    json: {\n      job_name: job.job_name || job.title || 'Unknown Job',\n      job_link: job.job_link || job.url || '',\n      job_description: job.job_description || job.description || '',\n      job_role: job.job_role || job.title || 'Unknown Role',\n      job_type: job.job_type || 'Full-time',\n      company_id: company_id,\n      source_url: career_page_url,\n      extraction_method: 'direct_crawl',\n      success: true\n    }\n  }));\n} else {\n  // No jobs found directly - need to crawl child links\n  const career_pages = result.career_pages || [];\n  if (!Array.isArray(career_pages) || career_pages.length === 0) {\n    return [{\n      json: {\n        error: 'No career pages found',\n        source_url: career_page_url,\n        company_id: company_id,\n        success: false\n      }\n    }];\n  }\n  \n  return career_pages.map(url => ({\n    json: {\n      career_page: url,\n      source_url: career_page_url,\n      company_id: company_id\n    }\n  }));\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, 1580],
      "id": "CheckInitialResult",
      "name": "Check Initial Result"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.job_name }}",
              "operation": "exists"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1080, 1580],
      "id": "HasDirectJobs",
      "name": "Has Direct Jobs?"
    },
    {
      "parameters": {
        "batchSize": 1
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1280, 1700],
      "id": "LoopCareerPages",
      "name": "Loop Career Pages",
      "executeOnce": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://crawler-ai.fly.dev/api/v1/crawl_child_links",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "career_page_url",
              "value": "={{ $json.career_page }}"
            },
            {
              "name": "max_links",
              "value": "15"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1480, 1700],
      "id": "ScrapeCareerContent",
      "name": "Crawl Child Links"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.workflow_data.has_job_links }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1680, 1700],
      "id": "HasJobLinks",
      "name": "Has Job Links?"
    },
    {
      "parameters": {
        "batchSize": 1
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1880, 1580],
      "id": "LoopJobLinks",
      "name": "Loop Job Links",
      "executeOnce": false
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "responseFormat": "string"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [2080, 1580],
      "id": "GetJobHTML",
      "name": "Get Job HTML"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are a job page detection AI. Analyze the HTML content and determine if it contains a job posting.\n\nCRITICAL: Only return hasJob=true if you are confident this is an actual job posting.\n\nANALYSIS CRITERIA:\n- hasJob=true: Page contains specific job posting with title, description, requirements\n- hasJob=false: Page is about company, careers, team, or general information\n\nRED FLAGS (indicate hasJob=false):\n- Only mentions \"career\", \"join us\", \"team\" without specific job details\n- Company overview, about us, general information\n- Blog posts, news, articles\n- Contact forms, general applications\n- No specific job title or requirements\n\nJOB_TYPE MAPPING (only if hasJob=true):\n- \"Full-time\" (permanent, regular positions)\n- \"Part-time\" (temporary, reduced hours)\n- \"Internship\" (student, trainee positions)\n- \"Freelance\" (project-based, independent work)\n- \"Remote\" (work-from-home, virtual positions)\n- \"On-site\" (office-based, physical location required)\n- \"Hybrid\" (mixed remote/office work)\n- \"Contract\" (fixed-term, temporary contracts)\n\nHTML CONTENT:\n{{ $json.body }}\n\nReturn ONLY the JSON object with hasJob, confidence, reason, and job details if applicable.",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [2280, 1580],
      "id": "AIExtractJob",
      "name": "AI Check & Extract"
    },
    {
      "parameters": {
        "jsCode": "// Validate AI response and handle errors\nconst ai_response = $input.first().json;\nconst current_url = $('Get Job HTML').item.json.url;\nconst company_id = $('Loop Career Pages').item.json.company_id;\nconst source_url = $('Loop Career Pages').item.json.source_url;\n\n// Check if AI response is valid\nif (!ai_response || typeof ai_response.hasJob !== 'boolean') {\n  return {\n    json: {\n      error: 'Invalid AI response format',\n      current_url: current_url,\n      company_id: company_id,\n      source_url: source_url,\n      success: false,\n      continue_loop: true\n    }\n  };\n}\n\n// Check confidence threshold\nif (ai_response.confidence && ai_response.confidence < 0.7) {\n  return {\n    json: {\n      error: 'Low confidence job detection',\n      confidence: ai_response.confidence,\n      reason: ai_response.reason,\n      current_url: current_url,\n      company_id: company_id,\n      source_url: source_url,\n      success: false,\n      continue_loop: true\n    }\n  };\n}\n\n// Process valid job detection\nif (ai_response.hasJob === true) {\n  return {\n    json: {\n      job_name: ai_response.job_name || 'Unknown Job',\n      job_link: ai_response.job_link || current_url,\n      job_description: ai_response.job_description || '',\n      job_role: ai_response.job_role || ai_response.job_name || 'Unknown Role',\n      job_type: ai_response.job_type || 'Full-time',\n      company_id: company_id,\n      source_url: source_url,\n      extraction_method: 'ai_detection',\n      success: true\n    }\n  };\n} else {\n  // No job found, continue to next link\n  return {\n    json: {\n      continue_loop: true,\n      job_found: false,\n      current_url: current_url,\n      company_id: company_id,\n      source_url: source_url,\n      success: true\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2480, 1580],
      "id": "ValidateAIResponse",
      "name": "Validate AI Response"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "operation": "equal",
              "value2": true
            },
            {
              "value1": "={{ $json.job_name }}",
              "operation": "exists"
            }
          ],
          "combineOperation": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2680, 1580],
      "id": "IfHasJob",
      "name": "Job Found?"
    },
    {
      "parameters": {
        "jsCode": "// No job links found\nreturn {\n  json: {\n    error: 'No job links found in career page',\n    source_url: $('Loop Career Pages').item.json.source_url,\n    company_id: $('Loop Career Pages').item.json.company_id,\n    success: false\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1880, 1820],
      "id": "NoJobLinks",
      "name": "No Job Links"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-55blff7khq-as.a.run.app/api/v1/companies/crawl/jobs",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            { "name": "job_name", "value": "={{ $json.job_name }}" },
            { "name": "job_type", "value": "={{ $json.job_type }}" },
            { "name": "job_role", "value": "={{ $json.job_role }}" },
            { "name": "job_description", "value": "={{ $json.job_description }}" },
            { "name": "company_id", "value": "={{ $json.company_id }}" },
            { "name": "job_link", "value": "={{ $json.job_link }}" }
          ]
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2880, 1520],
      "id": "SaveJob",
      "name": "Save Job"
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all results for comprehensive logging\nconst all_results = $input.all();\nconst successful_jobs = all_results.filter(item => \n  item.json.success && item.json.job_name && item.json.job_name !== 'Unknown Job'\n);\nconst failed_extractions = all_results.filter(item => \n  item.json.error || (item.json.success === false)\n);\nconst skipped_pages = all_results.filter(item => \n  item.json.continue_loop && item.json.job_found === false\n);\n\nconst summary = {\n  workflow_name: 'My workflow 3 (Fixed & Optimized)',\n  timestamp: new Date().toISOString(),\n  total_processed: all_results.length,\n  successful_jobs: successful_jobs.length,\n  failed_extractions: failed_extractions.length,\n  skipped_pages: skipped_pages.length,\n  success_rate: all_results.length > 0 ? (successful_jobs.length / all_results.length * 100).toFixed(2) + '%' : '0%',\n  \n  // Detailed results\n  jobs: successful_jobs.map(item => ({\n    job_name: item.json.job_name,\n    job_role: item.json.job_role,\n    job_type: item.json.job_type,\n    company_id: item.json.company_id,\n    source_url: item.json.source_url,\n    extraction_method: item.json.extraction_method\n  })),\n  \n  errors: failed_extractions.map(item => ({\n    error: item.json.error,\n    source_url: item.json.source_url,\n    company_id: item.json.company_id\n  })),\n  \n  workflow_completed: true,\n  version: '3.0-fixed'\n};\n\n// Log comprehensive summary\nconsole.log('=== WORKFLOW SUMMARY ===');\nconsole.log(JSON.stringify(summary, null, 2));\nconsole.log('=== END SUMMARY ===');\n\nreturn summary;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3080, 1520],
      "id": "Summary",
      "name": "Summary"
    }
  ],
  "connections": {
    "Webhook": { "main": [[{"node": "Initial Career Crawl","type": "main","index": 0}]] },
    "Initial Career Crawl": { "main": [[{"node": "Check Initial Result","type": "main","index": 0}]] },
    "Check Initial Result": { "main": [[{"node": "Has Direct Jobs?","type": "main","index": 0}]] },
    "Has Direct Jobs?": {
      "main": [[{"node": "Save Job","type": "main","index": 0}], [{"node": "Loop Career Pages","type": "main","index": 0}]]
    },
    "Loop Career Pages": { "main": [[{"node": "Crawl Child Links","type": "main","index": 0}]] },
    "Crawl Child Links": { "main": [[{"node": "Has Job Links?","type": "main","index": 0}]] },
    "Has Job Links?": {
      "main": [[{"node": "Loop Job Links","type": "main","index": 0}], [{"node": "No Job Links","type": "main","index": 0}]]
    },
    "Loop Job Links": { "main": [[{"node": "Get Job HTML","type": "main","index": 0}]] },
    "Get Job HTML": { "main": [[{"node": "AI Check & Extract","type": "main","index": 0}]] },
    "AI Check & Extract": { "main": [[{"node": "Validate AI Response","type": "main","index": 0}]] },
    "Validate AI Response": { "main": [[{"node": "Job Found?","type": "main","index": 0}]] },
    "Job Found?": {
      "main": [[{"node": "Save Job","type": "main","index": 0}], [{"node": "Summary","type": "main","index": 0}]]
    },
    "Save Job": { "main": [[{"node": "Summary","type": "main","index": 0}]] }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  }
} 